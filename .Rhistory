q()
install.packages("KernSmooth")
library(kernSmooth)
library("KernSmooth", lib.loc="C:/Users/Amit-Yamini/Documents/R/win-library/3.1")
q()
q()
lapply
q()
library(datasets)
data(iris)
?iris
s <- split(iris, iris$Species)
s
class(s$virginica)
answer <- lapply (s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width", "Petal.Length","Petal.Width")]))
answer
class(answer)
class(answer$virginica)
library(datasets)
data(mtcars)
?mtcars
mtcars
class(mtcars)
test <- mtcars[,"cyl"]
class(test)
?sapply
?tapply
sapply(mtcars, cyl, mean)
split(mtcars$mpg, mtcars$cyl)
?split
?sapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
hold <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hold
class(hold)
hold["4"]-hold["8"]
hold["4"]
q9)
q()
setwd("~/Amit/gitlocalrepo/ProgrammingAssignment2")
?solve
## makeCacheMatrix and cacheSolve functions in conjuction help to avoid
## repeating computation of inverse of a matrix since such as computations
## can take long time, especially for large matrices.
## Good explanation by James A. Stephenson (Community TA) at link-
## https://class.coursera.org/rprog-003/forum/thread?thread_id=664
## makeCacheMatrix function- Creates a list of subfunctions to manage cache for
## computation of inverse of matrix
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function(y){
x <<- y
I <<- NULL
}
get <- function() x
savecache <- function(solve) I <<- solve
getcache <- function() I
list(set=set, get=get, savecache=savecache, getcache=getcache)
}
## cacheSolve function- computes inverse of matrix only if cache does not
##already contain computation from previous function call for the same matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getcache()
if(!is.null(I)){
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data, ...)
x$savecache(I)
I
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getcache()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$getcache()
q()
